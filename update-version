#!/bin/bash

set -e

# Script configuration
SCRIPT_NAME=$(basename "$0")
SCRIPT_DIR="$HOME/.local/bin"
CONFIG_DIR="$HOME/.config/update-version"
CONFIG_FILE="$CONFIG_DIR/config"
DEFAULT_ROOT="$HOME/Documents/projects"

# Create config directory if it doesn't exist
mkdir -p "$CONFIG_DIR"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Logging functions
log_error() { echo -e "${RED}Error: $1${NC}" >&2; }
log_success() { echo -e "${GREEN}$1${NC}"; }
log_warning() { echo -e "${YELLOW}Warning: $1${NC}"; }

# Load configuration
load_config() {
    if [[ -f "$CONFIG_FILE" ]]; then
        source "$CONFIG_FILE"
    else
        # Create default config if it doesn't exist
        cat > "$CONFIG_FILE" << EOL
# Update Version Configuration
ROOT_PATH="$DEFAULT_ROOT"
# Add additional projects as needed:
# PROJECT_PATHS=(
#   "$DEFAULT_ROOT/project1"
#   "$DEFAULT_ROOT/project2"
# )
EOL
        log_warning "Created default configuration at $CONFIG_FILE"
    fi

    # Set default if not defined in config
    ROOT_PATH="${ROOT_PATH:-$DEFAULT_ROOT}"
}

# Version manipulation functions
validate_version() {
    local version=$1
    if [[ ! $version =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
        log_error "Invalid version format. Must be X.Y.Z (e.g., 1.2.3)"
        return 1
    fi
    return 0
}

increment_version() {
    local version="$1"
    local type="${2:-patch}"
    local -a parts
    IFS='.' read -ra parts <<< "$version"

    case "$type" in
        major) 
            parts[0]=$((parts[0] + 1))
            parts[1]=0
            parts[2]=0
            ;;
        minor)
            parts[1]=$((parts[1] + 1))
            parts[2]=0
            ;;
        patch)
            parts[2]=$((parts[2] + 1))
            ;;
        *)
            log_error "Invalid increment type: $type"
            return 1
            ;;
    esac

    echo "${parts[0]}.${parts[1]}.${parts[2]}"
}

show_help() {
    cat << EOF
Usage: $SCRIPT_NAME [OPTIONS]

Options:
  -i, --increment [TYPE]  Increment the version (TYPE: major|minor|patch, default: patch)
  -v, --version VALUE    Set a specific version (e.g., 1.2.3)
  -d, --dir PATH        Specify the relative directory under the root path
  -l, --list           List all configured project paths
  -c, --config         Show current configuration
  -h, --help           Show this help message

Examples:
  $SCRIPT_NAME -i patch              # Increment patch version
  $SCRIPT_NAME -i minor              # Increment minor version
  $SCRIPT_NAME -v 2.0.0             # Set specific version
  $SCRIPT_NAME -d myproject -i      # Increment version in specific directory
  $SCRIPT_NAME -l                   # List configured projects
EOF
    exit 1
}

list_projects() {
    echo "Configured Projects:"
    echo "Default root path: $ROOT_PATH"
    if [[ -v PROJECT_PATHS[@] ]]; then
        echo "Additional project paths:"
        for path in "${PROJECT_PATHS[@]}"; do
            echo "  - $path"
        done
    fi
}

show_config() {
    echo "Current Configuration:"
    echo "-------------------"
    echo "Config file: $CONFIG_FILE"
    echo "Root path: $ROOT_PATH"
    echo "Default directory: $DEFAULT_ROOT"
}

update_package_json() {
    local package_file="$1"
    local new_version="$2"
    
    if ! command -v jq &> /dev/null; then
        log_error "jq is required but not installed. Please install jq first."
        exit 1
    fi  # Added missing 'fi' here

    # Backup package.json
    cp "$package_file" "${package_file}.bak"

    # Update version
    if jq --arg newVersion "$new_version" '.version = $newVersion' "$package_file" > "$package_file.tmp"; then
        mv "$package_file.tmp" "$package_file"
        log_success "Updated version in $package_file: $CURRENT_VERSION â†’ $new_version"
    else
        log_error "Failed to update version"
        mv "${package_file}.bak" "$package_file"
        exit 1
    fi
}

# Main script
main() {
    load_config

    # Parse arguments
    local INCREMENT_TYPE="patch"
    local RELATIVE_DIR="."
    
    while [[ "$#" -gt 0 ]]; do
        case $1 in
            -i|--increment)
                INCREMENT=true
                if [[ -n "$2" && ! "$2" =~ ^- ]]; then
                    INCREMENT_TYPE="$2"
                    shift
                fi
                ;;
            -v|--version)
                NEW_VERSION="$2"
                shift
                ;;
            -d|--dir)
                RELATIVE_DIR="$2"
                shift
                ;;
            -l|--list)
                list_projects
                exit 0
                ;;
            -c|--config)
                show_config
                exit 0
                ;;
            -h|--help)
                show_help
                ;;
            *)
                log_error "Unknown parameter: $1"
                show_help
                ;;
        esac
        shift
    done

    # Determine full directory path
    PACKAGE_DIR="$ROOT_PATH/$RELATIVE_DIR"
    PACKAGE_FILE="$PACKAGE_DIR/package.json"

    # Validate directory and package.json
    if [[ ! -f "$PACKAGE_FILE" ]]; then
        log_error "$PACKAGE_FILE not found!"
        exit 1
    fi

    # Read current version
    CURRENT_VERSION=$(jq -r '.version' "$PACKAGE_FILE")
    if [[ -z "$CURRENT_VERSION" ]]; then
        log_error "Failed to read the current version!"
        exit 1
    fi

    # Determine the new version
    if [[ "$INCREMENT" == true ]]; then
        NEW_VERSION=$(increment_version "$CURRENT_VERSION" "$INCREMENT_TYPE")
    elif [[ -n "$NEW_VERSION" ]]; then
        if ! validate_version "$NEW_VERSION"; then
            exit 1
        fi
    else
        log_error "Either -i or -v must be specified."
        show_help
    fi

    # Update package.json
    update_package_json "$PACKAGE_FILE" "$NEW_VERSION"
}

# Run main function
main "$@"